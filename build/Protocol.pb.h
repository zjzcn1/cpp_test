// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef PROTOBUF_INCLUDED_Protocol_2eproto
#define PROTOBUF_INCLUDED_Protocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Protocol_2eproto 

namespace protobuf_Protocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Protocol_2eproto
namespace protocol {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PubPayload;
class PubPayloadDefaultTypeInternal;
extern PubPayloadDefaultTypeInternal _PubPayload_default_instance_;
class SubAckPayload;
class SubAckPayloadDefaultTypeInternal;
extern SubAckPayloadDefaultTypeInternal _SubAckPayload_default_instance_;
class SubPayload;
class SubPayloadDefaultTypeInternal;
extern SubPayloadDefaultTypeInternal _SubPayload_default_instance_;
class UnSubAckPayload;
class UnSubAckPayloadDefaultTypeInternal;
extern UnSubAckPayloadDefaultTypeInternal _UnSubAckPayload_default_instance_;
class UnSubPayload;
class UnSubPayloadDefaultTypeInternal;
extern UnSubPayloadDefaultTypeInternal _UnSubPayload_default_instance_;
}  // namespace protocol
namespace google {
namespace protobuf {
template<> ::protocol::Message* Arena::CreateMaybeMessage<::protocol::Message>(Arena*);
template<> ::protocol::PubPayload* Arena::CreateMaybeMessage<::protocol::PubPayload>(Arena*);
template<> ::protocol::SubAckPayload* Arena::CreateMaybeMessage<::protocol::SubAckPayload>(Arena*);
template<> ::protocol::SubPayload* Arena::CreateMaybeMessage<::protocol::SubPayload>(Arena*);
template<> ::protocol::UnSubAckPayload* Arena::CreateMaybeMessage<::protocol::UnSubAckPayload>(Arena*);
template<> ::protocol::UnSubPayload* Arena::CreateMaybeMessage<::protocol::UnSubPayload>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protocol {

enum Message_Type {
  Message_Type_PUB = 0,
  Message_Type_SUB = 1,
  Message_Type_SUB_ACK = 2,
  Message_Type_UNSUB = 3,
  Message_Type_UNSUB_ACK = 4,
  Message_Type_Message_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Message_Type_Message_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Message_Type_IsValid(int value);
const Message_Type Message_Type_Type_MIN = Message_Type_PUB;
const Message_Type Message_Type_Type_MAX = Message_Type_UNSUB_ACK;
const int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor();
inline const ::std::string& Message_Type_Name(Message_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Type_descriptor(), value);
}
inline bool Message_Type_Parse(
    const ::std::string& name, Message_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
enum AckResult {
  SUCCESS = 0,
  SUB_REPEATED = 1,
  UNSUB_NOT_FOUND = 2,
  AckResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AckResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AckResult_IsValid(int value);
const AckResult AckResult_MIN = SUCCESS;
const AckResult AckResult_MAX = UNSUB_NOT_FOUND;
const int AckResult_ARRAYSIZE = AckResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* AckResult_descriptor();
inline const ::std::string& AckResult_Name(AckResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    AckResult_descriptor(), value);
}
inline bool AckResult_Parse(
    const ::std::string& name, AckResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AckResult>(
    AckResult_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_Type Type;
  static const Type PUB =
    Message_Type_PUB;
  static const Type SUB =
    Message_Type_SUB;
  static const Type SUB_ACK =
    Message_Type_SUB_ACK;
  static const Type UNSUB =
    Message_Type_UNSUB;
  static const Type UNSUB_ACK =
    Message_Type_UNSUB_ACK;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Message_Type_Type_MIN;
  static const Type Type_MAX =
    Message_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Message_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes payload = 4;
  void clear_payload();
  static const int kPayloadFieldNumber = 4;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .protocol.Message.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::protocol::Message_Type type() const;
  void set_type(::protocol::Message_Type value);

  // bool compressed = 3;
  void clear_compressed();
  static const int kCompressedFieldNumber = 3;
  bool compressed() const;
  void set_compressed(bool value);

  // @@protoc_insertion_point(class_scope:protocol.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::int64 id_;
  int type_;
  bool compressed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PubPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PubPayload) */ {
 public:
  PubPayload();
  virtual ~PubPayload();

  PubPayload(const PubPayload& from);

  inline PubPayload& operator=(const PubPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PubPayload(PubPayload&& from) noexcept
    : PubPayload() {
    *this = ::std::move(from);
  }

  inline PubPayload& operator=(PubPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PubPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubPayload* internal_default_instance() {
    return reinterpret_cast<const PubPayload*>(
               &_PubPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PubPayload* other);
  friend void swap(PubPayload& a, PubPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PubPayload* New() const final {
    return CreateMaybeMessage<PubPayload>(NULL);
  }

  PubPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PubPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PubPayload& from);
  void MergeFrom(const PubPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string data_type = 2;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  const ::std::string& data_type() const;
  void set_data_type(const ::std::string& value);
  #if LANG_CXX11
  void set_data_type(::std::string&& value);
  #endif
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  ::std::string* mutable_data_type();
  ::std::string* release_data_type();
  void set_allocated_data_type(::std::string* data_type);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:protocol.PubPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr data_type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.SubPayload) */ {
 public:
  SubPayload();
  virtual ~SubPayload();

  SubPayload(const SubPayload& from);

  inline SubPayload& operator=(const SubPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubPayload(SubPayload&& from) noexcept
    : SubPayload() {
    *this = ::std::move(from);
  }

  inline SubPayload& operator=(SubPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubPayload* internal_default_instance() {
    return reinterpret_cast<const SubPayload*>(
               &_SubPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SubPayload* other);
  friend void swap(SubPayload& a, SubPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubPayload* New() const final {
    return CreateMaybeMessage<SubPayload>(NULL);
  }

  SubPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubPayload& from);
  void MergeFrom(const SubPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string subscriber_name = 2;
  void clear_subscriber_name();
  static const int kSubscriberNameFieldNumber = 2;
  const ::std::string& subscriber_name() const;
  void set_subscriber_name(const ::std::string& value);
  #if LANG_CXX11
  void set_subscriber_name(::std::string&& value);
  #endif
  void set_subscriber_name(const char* value);
  void set_subscriber_name(const char* value, size_t size);
  ::std::string* mutable_subscriber_name();
  ::std::string* release_subscriber_name();
  void set_allocated_subscriber_name(::std::string* subscriber_name);

  // int32 max_rate = 3;
  void clear_max_rate();
  static const int kMaxRateFieldNumber = 3;
  ::google::protobuf::int32 max_rate() const;
  void set_max_rate(::google::protobuf::int32 value);

  // bool compressed = 4;
  void clear_compressed();
  static const int kCompressedFieldNumber = 4;
  bool compressed() const;
  void set_compressed(bool value);

  // @@protoc_insertion_point(class_scope:protocol.SubPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr subscriber_name_;
  ::google::protobuf::int32 max_rate_;
  bool compressed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubAckPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.SubAckPayload) */ {
 public:
  SubAckPayload();
  virtual ~SubAckPayload();

  SubAckPayload(const SubAckPayload& from);

  inline SubAckPayload& operator=(const SubAckPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubAckPayload(SubAckPayload&& from) noexcept
    : SubAckPayload() {
    *this = ::std::move(from);
  }

  inline SubAckPayload& operator=(SubAckPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubAckPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubAckPayload* internal_default_instance() {
    return reinterpret_cast<const SubAckPayload*>(
               &_SubAckPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SubAckPayload* other);
  friend void swap(SubAckPayload& a, SubAckPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubAckPayload* New() const final {
    return CreateMaybeMessage<SubAckPayload>(NULL);
  }

  SubAckPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubAckPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubAckPayload& from);
  void MergeFrom(const SubAckPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubAckPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string subscriber_name = 3;
  void clear_subscriber_name();
  static const int kSubscriberNameFieldNumber = 3;
  const ::std::string& subscriber_name() const;
  void set_subscriber_name(const ::std::string& value);
  #if LANG_CXX11
  void set_subscriber_name(::std::string&& value);
  #endif
  void set_subscriber_name(const char* value);
  void set_subscriber_name(const char* value, size_t size);
  ::std::string* mutable_subscriber_name();
  ::std::string* release_subscriber_name();
  void set_allocated_subscriber_name(::std::string* subscriber_name);

  // .protocol.AckResult result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::protocol::AckResult result() const;
  void set_result(::protocol::AckResult value);

  // @@protoc_insertion_point(class_scope:protocol.SubAckPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr subscriber_name_;
  int result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnSubPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.UnSubPayload) */ {
 public:
  UnSubPayload();
  virtual ~UnSubPayload();

  UnSubPayload(const UnSubPayload& from);

  inline UnSubPayload& operator=(const UnSubPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnSubPayload(UnSubPayload&& from) noexcept
    : UnSubPayload() {
    *this = ::std::move(from);
  }

  inline UnSubPayload& operator=(UnSubPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnSubPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnSubPayload* internal_default_instance() {
    return reinterpret_cast<const UnSubPayload*>(
               &_UnSubPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UnSubPayload* other);
  friend void swap(UnSubPayload& a, UnSubPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnSubPayload* New() const final {
    return CreateMaybeMessage<UnSubPayload>(NULL);
  }

  UnSubPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnSubPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnSubPayload& from);
  void MergeFrom(const UnSubPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnSubPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string subscriber_name = 2;
  void clear_subscriber_name();
  static const int kSubscriberNameFieldNumber = 2;
  const ::std::string& subscriber_name() const;
  void set_subscriber_name(const ::std::string& value);
  #if LANG_CXX11
  void set_subscriber_name(::std::string&& value);
  #endif
  void set_subscriber_name(const char* value);
  void set_subscriber_name(const char* value, size_t size);
  ::std::string* mutable_subscriber_name();
  ::std::string* release_subscriber_name();
  void set_allocated_subscriber_name(::std::string* subscriber_name);

  // @@protoc_insertion_point(class_scope:protocol.UnSubPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr subscriber_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnSubAckPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.UnSubAckPayload) */ {
 public:
  UnSubAckPayload();
  virtual ~UnSubAckPayload();

  UnSubAckPayload(const UnSubAckPayload& from);

  inline UnSubAckPayload& operator=(const UnSubAckPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnSubAckPayload(UnSubAckPayload&& from) noexcept
    : UnSubAckPayload() {
    *this = ::std::move(from);
  }

  inline UnSubAckPayload& operator=(UnSubAckPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnSubAckPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnSubAckPayload* internal_default_instance() {
    return reinterpret_cast<const UnSubAckPayload*>(
               &_UnSubAckPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UnSubAckPayload* other);
  friend void swap(UnSubAckPayload& a, UnSubAckPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnSubAckPayload* New() const final {
    return CreateMaybeMessage<UnSubAckPayload>(NULL);
  }

  UnSubAckPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnSubAckPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnSubAckPayload& from);
  void MergeFrom(const UnSubAckPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnSubAckPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string subscriber_name = 3;
  void clear_subscriber_name();
  static const int kSubscriberNameFieldNumber = 3;
  const ::std::string& subscriber_name() const;
  void set_subscriber_name(const ::std::string& value);
  #if LANG_CXX11
  void set_subscriber_name(::std::string&& value);
  #endif
  void set_subscriber_name(const char* value);
  void set_subscriber_name(const char* value, size_t size);
  ::std::string* mutable_subscriber_name();
  ::std::string* release_subscriber_name();
  void set_allocated_subscriber_name(::std::string* subscriber_name);

  // .protocol.AckResult result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::protocol::AckResult result() const;
  void set_result(::protocol::AckResult value);

  // @@protoc_insertion_point(class_scope:protocol.UnSubAckPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr subscriber_name_;
  int result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// .protocol.Message.Type type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::protocol::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:protocol.Message.type)
  return static_cast< ::protocol::Message_Type >(type_);
}
inline void Message::set_type(::protocol::Message_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Message.type)
}

// int64 id = 2;
inline void Message::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Message::id() const {
  // @@protoc_insertion_point(field_get:protocol.Message.id)
  return id_;
}
inline void Message::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Message.id)
}

// bool compressed = 3;
inline void Message::clear_compressed() {
  compressed_ = false;
}
inline bool Message::compressed() const {
  // @@protoc_insertion_point(field_get:protocol.Message.compressed)
  return compressed_;
}
inline void Message::set_compressed(bool value) {
  
  compressed_ = value;
  // @@protoc_insertion_point(field_set:protocol.Message.compressed)
}

// bytes payload = 4;
inline void Message::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::payload() const {
  // @@protoc_insertion_point(field_get:protocol.Message.payload)
  return payload_.GetNoArena();
}
inline void Message::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Message.payload)
}
#if LANG_CXX11
inline void Message::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Message.payload)
}
#endif
inline void Message::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Message.payload)
}
inline void Message::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Message.payload)
}
inline ::std::string* Message::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Message.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_payload() {
  // @@protoc_insertion_point(field_release:protocol.Message.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:protocol.Message.payload)
}

// -------------------------------------------------------------------

// PubPayload

// string topic = 1;
inline void PubPayload::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PubPayload::topic() const {
  // @@protoc_insertion_point(field_get:protocol.PubPayload.topic)
  return topic_.GetNoArena();
}
inline void PubPayload::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PubPayload.topic)
}
#if LANG_CXX11
inline void PubPayload::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PubPayload.topic)
}
#endif
inline void PubPayload::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PubPayload.topic)
}
inline void PubPayload::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PubPayload.topic)
}
inline ::std::string* PubPayload::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:protocol.PubPayload.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PubPayload::release_topic() {
  // @@protoc_insertion_point(field_release:protocol.PubPayload.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PubPayload::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:protocol.PubPayload.topic)
}

// string data_type = 2;
inline void PubPayload::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PubPayload::data_type() const {
  // @@protoc_insertion_point(field_get:protocol.PubPayload.data_type)
  return data_type_.GetNoArena();
}
inline void PubPayload::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PubPayload.data_type)
}
#if LANG_CXX11
inline void PubPayload::set_data_type(::std::string&& value) {
  
  data_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PubPayload.data_type)
}
#endif
inline void PubPayload::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PubPayload.data_type)
}
inline void PubPayload::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PubPayload.data_type)
}
inline ::std::string* PubPayload::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:protocol.PubPayload.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PubPayload::release_data_type() {
  // @@protoc_insertion_point(field_release:protocol.PubPayload.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PubPayload::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:protocol.PubPayload.data_type)
}

// bytes data = 3;
inline void PubPayload::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PubPayload::data() const {
  // @@protoc_insertion_point(field_get:protocol.PubPayload.data)
  return data_.GetNoArena();
}
inline void PubPayload::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PubPayload.data)
}
#if LANG_CXX11
inline void PubPayload::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PubPayload.data)
}
#endif
inline void PubPayload::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PubPayload.data)
}
inline void PubPayload::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PubPayload.data)
}
inline ::std::string* PubPayload::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.PubPayload.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PubPayload::release_data() {
  // @@protoc_insertion_point(field_release:protocol.PubPayload.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PubPayload::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.PubPayload.data)
}

// -------------------------------------------------------------------

// SubPayload

// string topic = 1;
inline void SubPayload::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubPayload::topic() const {
  // @@protoc_insertion_point(field_get:protocol.SubPayload.topic)
  return topic_.GetNoArena();
}
inline void SubPayload::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SubPayload.topic)
}
#if LANG_CXX11
inline void SubPayload::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SubPayload.topic)
}
#endif
inline void SubPayload::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SubPayload.topic)
}
inline void SubPayload::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SubPayload.topic)
}
inline ::std::string* SubPayload::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SubPayload.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubPayload::release_topic() {
  // @@protoc_insertion_point(field_release:protocol.SubPayload.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubPayload::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:protocol.SubPayload.topic)
}

// string subscriber_name = 2;
inline void SubPayload::clear_subscriber_name() {
  subscriber_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubPayload::subscriber_name() const {
  // @@protoc_insertion_point(field_get:protocol.SubPayload.subscriber_name)
  return subscriber_name_.GetNoArena();
}
inline void SubPayload::set_subscriber_name(const ::std::string& value) {
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SubPayload.subscriber_name)
}
#if LANG_CXX11
inline void SubPayload::set_subscriber_name(::std::string&& value) {
  
  subscriber_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SubPayload.subscriber_name)
}
#endif
inline void SubPayload::set_subscriber_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SubPayload.subscriber_name)
}
inline void SubPayload::set_subscriber_name(const char* value, size_t size) {
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SubPayload.subscriber_name)
}
inline ::std::string* SubPayload::mutable_subscriber_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SubPayload.subscriber_name)
  return subscriber_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubPayload::release_subscriber_name() {
  // @@protoc_insertion_point(field_release:protocol.SubPayload.subscriber_name)
  
  return subscriber_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubPayload::set_allocated_subscriber_name(::std::string* subscriber_name) {
  if (subscriber_name != NULL) {
    
  } else {
    
  }
  subscriber_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscriber_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SubPayload.subscriber_name)
}

// int32 max_rate = 3;
inline void SubPayload::clear_max_rate() {
  max_rate_ = 0;
}
inline ::google::protobuf::int32 SubPayload::max_rate() const {
  // @@protoc_insertion_point(field_get:protocol.SubPayload.max_rate)
  return max_rate_;
}
inline void SubPayload::set_max_rate(::google::protobuf::int32 value) {
  
  max_rate_ = value;
  // @@protoc_insertion_point(field_set:protocol.SubPayload.max_rate)
}

// bool compressed = 4;
inline void SubPayload::clear_compressed() {
  compressed_ = false;
}
inline bool SubPayload::compressed() const {
  // @@protoc_insertion_point(field_get:protocol.SubPayload.compressed)
  return compressed_;
}
inline void SubPayload::set_compressed(bool value) {
  
  compressed_ = value;
  // @@protoc_insertion_point(field_set:protocol.SubPayload.compressed)
}

// -------------------------------------------------------------------

// SubAckPayload

// .protocol.AckResult result = 1;
inline void SubAckPayload::clear_result() {
  result_ = 0;
}
inline ::protocol::AckResult SubAckPayload::result() const {
  // @@protoc_insertion_point(field_get:protocol.SubAckPayload.result)
  return static_cast< ::protocol::AckResult >(result_);
}
inline void SubAckPayload::set_result(::protocol::AckResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protocol.SubAckPayload.result)
}

// string topic = 2;
inline void SubAckPayload::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubAckPayload::topic() const {
  // @@protoc_insertion_point(field_get:protocol.SubAckPayload.topic)
  return topic_.GetNoArena();
}
inline void SubAckPayload::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SubAckPayload.topic)
}
#if LANG_CXX11
inline void SubAckPayload::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SubAckPayload.topic)
}
#endif
inline void SubAckPayload::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SubAckPayload.topic)
}
inline void SubAckPayload::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SubAckPayload.topic)
}
inline ::std::string* SubAckPayload::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SubAckPayload.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubAckPayload::release_topic() {
  // @@protoc_insertion_point(field_release:protocol.SubAckPayload.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubAckPayload::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:protocol.SubAckPayload.topic)
}

// string subscriber_name = 3;
inline void SubAckPayload::clear_subscriber_name() {
  subscriber_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubAckPayload::subscriber_name() const {
  // @@protoc_insertion_point(field_get:protocol.SubAckPayload.subscriber_name)
  return subscriber_name_.GetNoArena();
}
inline void SubAckPayload::set_subscriber_name(const ::std::string& value) {
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SubAckPayload.subscriber_name)
}
#if LANG_CXX11
inline void SubAckPayload::set_subscriber_name(::std::string&& value) {
  
  subscriber_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SubAckPayload.subscriber_name)
}
#endif
inline void SubAckPayload::set_subscriber_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SubAckPayload.subscriber_name)
}
inline void SubAckPayload::set_subscriber_name(const char* value, size_t size) {
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SubAckPayload.subscriber_name)
}
inline ::std::string* SubAckPayload::mutable_subscriber_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SubAckPayload.subscriber_name)
  return subscriber_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubAckPayload::release_subscriber_name() {
  // @@protoc_insertion_point(field_release:protocol.SubAckPayload.subscriber_name)
  
  return subscriber_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubAckPayload::set_allocated_subscriber_name(::std::string* subscriber_name) {
  if (subscriber_name != NULL) {
    
  } else {
    
  }
  subscriber_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscriber_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SubAckPayload.subscriber_name)
}

// -------------------------------------------------------------------

// UnSubPayload

// string topic = 1;
inline void UnSubPayload::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnSubPayload::topic() const {
  // @@protoc_insertion_point(field_get:protocol.UnSubPayload.topic)
  return topic_.GetNoArena();
}
inline void UnSubPayload::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UnSubPayload.topic)
}
#if LANG_CXX11
inline void UnSubPayload::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UnSubPayload.topic)
}
#endif
inline void UnSubPayload::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UnSubPayload.topic)
}
inline void UnSubPayload::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UnSubPayload.topic)
}
inline ::std::string* UnSubPayload::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UnSubPayload.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnSubPayload::release_topic() {
  // @@protoc_insertion_point(field_release:protocol.UnSubPayload.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnSubPayload::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:protocol.UnSubPayload.topic)
}

// string subscriber_name = 2;
inline void UnSubPayload::clear_subscriber_name() {
  subscriber_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnSubPayload::subscriber_name() const {
  // @@protoc_insertion_point(field_get:protocol.UnSubPayload.subscriber_name)
  return subscriber_name_.GetNoArena();
}
inline void UnSubPayload::set_subscriber_name(const ::std::string& value) {
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UnSubPayload.subscriber_name)
}
#if LANG_CXX11
inline void UnSubPayload::set_subscriber_name(::std::string&& value) {
  
  subscriber_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UnSubPayload.subscriber_name)
}
#endif
inline void UnSubPayload::set_subscriber_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UnSubPayload.subscriber_name)
}
inline void UnSubPayload::set_subscriber_name(const char* value, size_t size) {
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UnSubPayload.subscriber_name)
}
inline ::std::string* UnSubPayload::mutable_subscriber_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UnSubPayload.subscriber_name)
  return subscriber_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnSubPayload::release_subscriber_name() {
  // @@protoc_insertion_point(field_release:protocol.UnSubPayload.subscriber_name)
  
  return subscriber_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnSubPayload::set_allocated_subscriber_name(::std::string* subscriber_name) {
  if (subscriber_name != NULL) {
    
  } else {
    
  }
  subscriber_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscriber_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.UnSubPayload.subscriber_name)
}

// -------------------------------------------------------------------

// UnSubAckPayload

// .protocol.AckResult result = 1;
inline void UnSubAckPayload::clear_result() {
  result_ = 0;
}
inline ::protocol::AckResult UnSubAckPayload::result() const {
  // @@protoc_insertion_point(field_get:protocol.UnSubAckPayload.result)
  return static_cast< ::protocol::AckResult >(result_);
}
inline void UnSubAckPayload::set_result(::protocol::AckResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protocol.UnSubAckPayload.result)
}

// string topic = 2;
inline void UnSubAckPayload::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnSubAckPayload::topic() const {
  // @@protoc_insertion_point(field_get:protocol.UnSubAckPayload.topic)
  return topic_.GetNoArena();
}
inline void UnSubAckPayload::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UnSubAckPayload.topic)
}
#if LANG_CXX11
inline void UnSubAckPayload::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UnSubAckPayload.topic)
}
#endif
inline void UnSubAckPayload::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UnSubAckPayload.topic)
}
inline void UnSubAckPayload::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UnSubAckPayload.topic)
}
inline ::std::string* UnSubAckPayload::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UnSubAckPayload.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnSubAckPayload::release_topic() {
  // @@protoc_insertion_point(field_release:protocol.UnSubAckPayload.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnSubAckPayload::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:protocol.UnSubAckPayload.topic)
}

// string subscriber_name = 3;
inline void UnSubAckPayload::clear_subscriber_name() {
  subscriber_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnSubAckPayload::subscriber_name() const {
  // @@protoc_insertion_point(field_get:protocol.UnSubAckPayload.subscriber_name)
  return subscriber_name_.GetNoArena();
}
inline void UnSubAckPayload::set_subscriber_name(const ::std::string& value) {
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UnSubAckPayload.subscriber_name)
}
#if LANG_CXX11
inline void UnSubAckPayload::set_subscriber_name(::std::string&& value) {
  
  subscriber_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UnSubAckPayload.subscriber_name)
}
#endif
inline void UnSubAckPayload::set_subscriber_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UnSubAckPayload.subscriber_name)
}
inline void UnSubAckPayload::set_subscriber_name(const char* value, size_t size) {
  
  subscriber_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UnSubAckPayload.subscriber_name)
}
inline ::std::string* UnSubAckPayload::mutable_subscriber_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UnSubAckPayload.subscriber_name)
  return subscriber_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnSubAckPayload::release_subscriber_name() {
  // @@protoc_insertion_point(field_release:protocol.UnSubAckPayload.subscriber_name)
  
  return subscriber_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnSubAckPayload::set_allocated_subscriber_name(::std::string* subscriber_name) {
  if (subscriber_name != NULL) {
    
  } else {
    
  }
  subscriber_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscriber_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.UnSubAckPayload.subscriber_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::Message_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Message_Type>() {
  return ::protocol::Message_Type_descriptor();
}
template <> struct is_proto_enum< ::protocol::AckResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::AckResult>() {
  return ::protocol::AckResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Protocol_2eproto
